<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 스프링 프레임 워크에서 객체를 생성후 DI(의존성 주입)으로 객체를 주입한다. -->

<!-- SamsungTV 객체를 Spring framework 에서 생성해서 DI (의존성 주입으로) -->
<!-- id : 객체명, class : 패키지명.클래스명 
	polymorphism_3_1_2
-->
<!--  새로운 기능이나 변경 사항이 생겼을 때 자바 파일의 수정은 하지 않고 Bean파일만 생성해서 수정하면 된다.

<bean id = "tv" class = "polymorphism_3_1_2.SamsungTV"></bean>
<bean id = "tv" class = "polymorphism_3_1_2.LgTV"></bean>
-->

<!-- scope 옵션 :
		 - singleton : 단 하나의 객체만 생성되도록 설정 (기본값) 
		 - prototype : 여러개의 객체를 생성할 수 있도록 설정 
-->
<!-- 
<bean id = "tv" class = "polymorphism_4_1_2.DusanTV" scope = "singleton"></bean>
 -->

<!-- init-method 옵션 : 빈에서 객체를 생성 후 호출하는 메소드  -->
<!-- destory-method 옵션 : 객체 종료 직전에 호출되는 메소드 -->
<!-- 
<bean id = "tv" class = "polymorphism_4_1_2.SamsungTV" init-method="initMethod"
	destroy-method="destroyMethod"></bean>
-->
<!-- lazy-init 
		Spring 객체를 메모리에 로딩 하는 방식 : pre-loading 방식 (메모리에 즉시 로딩)
		lazy-init = "true" : 요청이 있을 때만 메모리에 로딩하는 방식 
		
<bean id = "tv" class = "polymorphism_4_1_2.SamsungTV" lazy-init = "true"> </bean>
 -->	

<!-- 생성자에 객체 전달 : 4_2 셋팅 사항 
		ref : 생성자 매개 변수로 참조형 변수를 전달 (객체, 배열 .. )
		value : 생성자 매개 변수로 기본 자료형 (정수, 문자열 ..)
	 -->
<!-- 
<bean id = "tv" class = "polymorphism_4_2.SamsungTV"> 
	<constructor-arg ref = "sony"></constructor-arg>
</bean>

<bean id = "sony" class = "polymorphism_4_2.SonySpeaker"></bean>
 -->


<!-- 생성자의 여러개의 매개 변수 설정하기  4_2_1 셋팅 사항  -->
<bean id = "tv" class = "polymorphism_4_2_1.SamsungTV"> 
	<constructor-arg ref = "sony"></constructor-arg>
	<constructor-arg value = "3000000"></constructor-arg>
</bean>

<bean id = "sony" class = "polymorphism_4_2_1.SonySpeaker"></bean>





</beans>
